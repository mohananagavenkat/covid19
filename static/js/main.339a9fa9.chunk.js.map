{"version":3,"sources":["components/Navbar/Navbar.js","components/Advice/Advice.js","components/CountriesDropdown/index.js","components/AreaSplineChart/AreaSplineChart.js","components/About/index.js","components/Contact/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","Advice","props","useState","activeAdvise","setActiveAdvise","adviceList","setAdviceList","activeAdviseNumber","useEffect","fetch","then","res","json","data","factoids","changeAdvise","length","setInterval","banner","styles","label","fontWeight","select","padding","CountriesDropdown","countries","onCountryChnage","selectedCountry","style","htmlFor","name","value","id","onChange","e","target","map","country","key","AreaSplineChart","intialOptions","chart","height","rangeSelector","selected","xAxis","range","labels","enabled","x","formatter","Highcharts","dateFormat","this","yAxis","opposite","align","lineWidth","tooltip","concat","points","point","series","Number","y","toLocaleString","split","options","setOptions","historicData","setHistoricData","setCountries","setSelectedCountry","cases","recovered","deaths","selectedCountryUpdatedData","setSelectedCountryUpdatedData","response","console","log","countriesData","item","province","sort","generateChartData","seriesData","changedOptions","Object","assign","selectedCountryData","filter","active","timezoneOffset","Date","getTimezoneOffset","date","JSON","stringify","timeline","time","getTime","casesCount","recoveredCount","deathsCount","push","countryUpdatedData","highcharts","constructorType","selectedCountryDataTable","About","Contact","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.339a9fa9.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Navbar.css'\r\nimport { Link } from 'react-router-dom';\r\nfunction Navbar() {\r\n    return (\r\n        <nav>\r\n            <div className=\"logo\">\r\n                <p>CV19</p>\r\n            </div>\r\n            <ul>\r\n                <li> <Link to='/covid19' > Home</Link></li>\r\n                <li> <Link to='/covid19/about' > About</Link></li>\r\n                <li> <Link to='/covid19/contact' > Contact</Link></li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useState, useEffect } from 'react'\r\nimport './Advice.css'\r\nfunction Advice(props) {\r\n    const [activeAdvise, setActiveAdvise] = useState(\"Loading...\");\r\n    const [adviceList, setAdviceList] = useState(null);\r\n\r\n    let activeAdviseNumber = 0;\r\n    let adviseInterval = null;\r\n\r\n    const getAdviceList = () => {\r\n        fetch('https://api.covid19india.org/website_data.json')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setAdviceList(data.factoids);\r\n                //console.log(\"fetched banners\")\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAdviceList();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        //console.log(adviceList);\r\n        changeAdvise();\r\n        //console.log(\"chnage advice called from useEffect\");\r\n    }, [adviceList])\r\n\r\n    const changeAdvise = () => {\r\n        if (adviceList && adviceList.length > 1) {\r\n            setActiveAdvise(adviceList[activeAdviseNumber++]);\r\n            adviseInterval = setInterval(() => {\r\n                //console.log(\"interval started\");\r\n                //console.log(activeAdviseNumber, adviceList.length, activeAdvise);\r\n                if (activeAdviseNumber + 1 > adviceList.length - 1) {\r\n                    activeAdviseNumber = 0;\r\n                } else {\r\n                    activeAdviseNumber++;\r\n                }\r\n                setActiveAdvise(adviceList[activeAdviseNumber]);\r\n                //console.log(activeAdviseNumber, adviceList.length, activeAdvise);\r\n            }, 5500);\r\n            //console.log(activeAdviseNumber,activeAdvise);\r\n        }\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     const interval =\r\n\r\n    // }, [activeAdviseNumber])\r\n\r\n\r\n    return (\r\n        <div className=\"advise\">\r\n            <p>{activeAdvise.banner}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Advice\r\n","import React from 'react'\r\n\r\nconst styles = {\r\n    label:{\r\n        fontWeight:'bold'\r\n    },\r\n    select:{\r\n        padding:'.4rem'\r\n    }\r\n}\r\n\r\nfunction CountriesDropdown({ countries, onCountryChnage, selectedCountry }) {\r\n    return (\r\n        <div>\r\n            <label style={styles.label} htmlFor=\"country\">Country : </label>\r\n            <select style={styles.select} name=\"country\" value={selectedCountry} id=\"country\" onChange={(e) => onCountryChnage(e.target.value)}>\r\n                {\r\n                    countries.map(country => {\r\n                        return (\r\n                            <option key={country} value={country} >{country}</option>\r\n                        )\r\n                    })\r\n                }\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountriesDropdown\r\n","import React, { useState, useEffect } from 'react'\r\nimport Highcharts from 'highcharts/highstock';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport './AreaSplineChart.css';\r\nimport CountriesDropdown from '../CountriesDropdown';\r\nfunction AreaSplineChart() {\r\n    let intialOptions = {\r\n        chart:{\r\n            height:500\r\n        },\r\n        rangeSelector: {\r\n            selected: 0,\r\n        },\r\n        xAxis: {\r\n            range: 86400 * 1000 * 7, // six months\r\n            labels: {\r\n                enabled: true,\r\n                x: -10,\r\n                formatter: function () {\r\n                    return Highcharts.dateFormat(\"%e %b\", this.value);\r\n                }\r\n            },\r\n        },\r\n        yAxis: {\r\n            opposite: true,\r\n            labels: {\r\n                align: 'right',\r\n                x: -10\r\n            },\r\n            lineWidth: 1,\r\n        },\r\n        tooltip: {\r\n            formatter: function () {\r\n                return ['<b>' + Highcharts.dateFormat(\"%A, %B %e - %Y\", this.x) + '</b>'].concat(\r\n                    this.points ?\r\n                        this.points.map(function (point) {\r\n                            return point.series.name + ': ' + Number(point.y).toLocaleString();\r\n                        }) : []\r\n                );\r\n            },\r\n            split: true\r\n        },\r\n        series: []\r\n    };\r\n\r\n    const [options, setOptions] = useState(intialOptions);\r\n    const [historicData, setHistoricData] = useState([]);\r\n    const [countries, setCountries] = useState([]);\r\n    const [selectedCountry, setSelectedCountry] = useState('India');\r\n    const [selectedCountryUpdatedData, setSelectedCountryUpdatedData] = useState({ cases: 0, recovered: 0, deaths: 0 });\r\n\r\n\r\n    useEffect(() => {\r\n        fetch('https://corona.lmao.ninja/v2/historical')\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                console.log(\"API Response\", response);\r\n                const countriesData = response.map(item => `${item.country}${item.province ? ' - ' + item.province : ''}`);\r\n                setHistoricData(response);\r\n                setCountries(countriesData.sort());\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        generateChartData();\r\n    }, [historicData, selectedCountry]);\r\n\r\n    const generateChartData = () => {\r\n        console.log(\"Generate Chart Data Executed\", historicData);\r\n        if (!(historicData && historicData.length > 0)) return;\r\n        let seriesData = [];\r\n        let changedOptions = Object.assign({}, intialOptions);\r\n        let selectedCountryData = historicData.filter(item => `${item.country}${item.province ? ' - ' + item.province : ''}` === selectedCountry)[0];\r\n        let cases = [];\r\n        let recovered = [];\r\n        let deaths = [];\r\n        let active = [];\r\n        // changedOptions[\"xAxis\"][\"categories\"] = Object.keys(response[0].timeline.cases);\r\n        let timezoneOffset = new Date().getTimezoneOffset() * 60 * 1000;\r\n        console.log(JSON.stringify(selectedCountryData.timeline));\r\n        for (let date in selectedCountryData.timeline.cases) {\r\n            let time = (new Date(date).getTime() - timezoneOffset);\r\n            let { cases:{[date]:casesCount}, recovered:{[date]:recoveredCount}, deaths:{[date]:deathsCount} } = selectedCountryData.timeline\r\n            // console.log(new Date(new Date(time).toLocaleString()))\r\n            cases.push([time, casesCount]);\r\n            recovered.push([time, recoveredCount]);\r\n            deaths.push([time, deathsCount]);\r\n            active.push([time, casesCount - recoveredCount - deathsCount]);\r\n        }\r\n        seriesData.push({ name: `Total Cases`, data: cases });\r\n        seriesData.push({ name: `Recovered`, data: recovered });\r\n        seriesData.push({ name: `Deaths`, data: deaths });\r\n        seriesData.push({ name: `Active`, data: active });\r\n        changedOptions['series'] = seriesData;\r\n        console.log(\"Map Data\", changedOptions);\r\n        let countryUpdatedData = {\r\n            cases: cases[cases.length - 1][1],\r\n            recovered: recovered[recovered.length - 1][1],\r\n            deaths: deaths[deaths.length - 1][1],\r\n        };\r\n        setOptions(changedOptions);\r\n        setSelectedCountryUpdatedData(countryUpdatedData);\r\n    }\r\n\r\n    const onCountryChange = (country) => {\r\n        console.log(\"Country Changed to \", country);\r\n        setSelectedCountry(country);\r\n    }\r\n\r\n    const selectedCountryDataTable = (data) => {\r\n        const {cases,recovered,deaths} = data;\r\n        return (\r\n            <div className=\"selected-country\">\r\n                <h3>{selectedCountry}</h3>\r\n                <div className=\"data\">\r\n                    <div className=\"cases\">\r\n                        <p>Total</p>\r\n                        <p>{Number(cases).toLocaleString()}</p>\r\n                    </div>\r\n                    <div className=\"recovered\">\r\n                        <p>Recovered</p>\r\n                        <p>{Number(recovered).toLocaleString()}</p>\r\n                    </div>\r\n                    <div className=\"deaths\">\r\n                        <p>Deaths</p>\r\n                        <p>{Number(deaths).toLocaleString()}</p>\r\n                    </div>\r\n                    <div className=\"active\">\r\n                        <p>Active</p>\r\n                        <p>{Number(cases - recovered - deaths).toLocaleString()}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"charts-cotainer\">\r\n            <div className=\"chart-header\">\r\n                {countries && <CountriesDropdown selectedCountry={selectedCountry} countries={countries} onCountryChnage={onCountryChange} />}\r\n            </div>\r\n            <HighchartsReact\r\n                highcharts={Highcharts}\r\n                constructorType={'stockChart'}\r\n                options={options}\r\n            />\r\n            {selectedCountry && selectedCountryUpdatedData && selectedCountryDataTable(selectedCountryUpdatedData)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AreaSplineChart\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n            This is About Page\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React from 'react'\r\n\r\nfunction Contact() {\r\n    return (\r\n        <div>\r\n            Contcat Page\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Advice from \"./components/Advice/Advice\";\nimport AreaSplineChart from \"./components/AreaSplineChart/AreaSplineChart\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport About from \"./components/About\";\nimport Contact from \"./components/Contact\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar></Navbar>\n        <Advice></Advice>\n      <Switch>\n        <Route exact path=\"/covid19\" component={AreaSplineChart} />\n        <Route exact path=\"/covid19/about\" component={About} />\n        <Route exact path=\"/covid19/contact\" component={Contact} />\n      </Switch>\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}